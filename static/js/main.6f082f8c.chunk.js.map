{"version":3,"sources":["config/fbConfig.jsx","App.js","serviceWorker.js","index.js","static/images/profile.png","static/images/ring2.gif"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","fire","database","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSubmit","e","preventDefault","refs","phone_number","value","length","alert","itemsRef","push","username","deleteSubscriber","id","update","defineProperty","key","state","subscribers","loading","ref","_this2","setState","on","data","subscriber","val","keys","map","objectSpread","_this3","count","react_default","a","createElement","Fragment","className","src","image","alt","onSubmit","type","placeholder","required","minLength","maxLength","size","gif","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.6f082f8c.chunk.js","sourcesContent":["import firebase from \"firebase\";\r\n  var config = {\r\n    apiKey: \"AIzaSyDtT9sukYyVIqPQY2VrUkr19p8UFgGCWmg\",\r\n    authDomain: \"phone-directory-88c5c.firebaseapp.com\",\r\n    databaseURL: \"https://phone-directory-88c5c.firebaseio.com\",\r\n    projectId: \"phone-directory-88c5c\",\r\n    storageBucket: \"phone-directory-88c5c.appspot.com\",\r\n    messagingSenderId: \"846920865840\"\r\n  };\r\n  firebase.initializeApp(config);\r\n\r\nvar fire = firebase.database();\r\nexport { fire };\r\n","import React, { Component } from \"react\";\r\nimport { fire } from \"./config/fbConfig\";\r\nimport \"./App.css\";\r\nimport image from \"./static/images/profile.png\";\r\nimport gif from \"./static/images/ring2.gif\";\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      subscribers: [],\r\n      loading: false\r\n    };\r\n\r\n    this.itemsRef = fire.ref(\"subscriber\");\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.setState({ loading: true });\r\n    this.itemsRef.on(\"value\", data => {\r\n      var subscriber = data.val() || {};\r\n      var keys = Object.keys(subscriber);\r\n      const subscribers = keys.map(key => ({ key, ...subscriber[key] }));\r\n      this.setState({ subscribers, loading: false });\r\n    });\r\n  }\r\n\r\n  handleSubmit = e => {\r\n    e.preventDefault();\r\n    if (this.refs.phone_number.value.length !== 10) {\r\n      alert(\"Invalid Phone Number\");\r\n    } else {\r\n      this.itemsRef.push({\r\n        username: this.refs.username.value,\r\n        phone_number: this.refs.phone_number.value\r\n      });\r\n\r\n      this.refs.username.value = \"\";\r\n      this.refs.phone_number.value = \"\";\r\n    }\r\n  };\r\n\r\n  deleteSubscriber = id => {\r\n    this.itemsRef.update({\r\n      [id.key]: null\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { length: count } = this.state.subscribers;\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"container\">\r\n          <div>\r\n            <img className=\"logo\" src={image} alt=\"logo\" />\r\n            <h1> Phone Directory </h1>\r\n            <form onSubmit={this.handleSubmit}>\r\n              <div className=\"form-group\" id=\"spc-1\">\r\n                <div className=\"input-1\">\r\n                  <i className=\"fa fa-user\" />\r\n                  <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    ref=\"username\"\r\n                    placeholder=\"Enter name\"\r\n                    required\r\n                  />\r\n                </div>\r\n              </div>\r\n              <div className=\"form-group\">\r\n                <div className=\"input-1\">\r\n                  <i className=\"fa fa-phone\" />\r\n                  <input\r\n                    type=\"number\"\r\n                    className=\"form-control\"\r\n                    minLength=\"10\"\r\n                    maxLength=\"10\"\r\n                    size=\"10\"\r\n                    ref=\"phone_number\"\r\n                    placeholder=\"Enter phone number\"\r\n                    required\r\n                  />\r\n                </div>\r\n              </div>\r\n              <button type=\"submit\" className=\"btn btn-primary\">\r\n                Subscribe\r\n              </button>\r\n            </form>\r\n          </div>\r\n        </div>\r\n        {this.state.loading ? (\r\n          <div className=\"gif\">\r\n            <img src={gif} alt=\"gif\" />\r\n          </div>\r\n        ) : count === 0 ? (\r\n          <p className=\"gif\">There are no subscriber in Database</p>\r\n        ) : (\r\n          <div className=\"list\">\r\n            <table className=\"table\">\r\n              <thead>\r\n                <tr>\r\n                  <th>Name</th>\r\n                  <th>Mobile Number</th>\r\n                  <th />\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {this.state.subscribers.map(subscriber => (\r\n                  <tr key={subscriber.key}>\r\n                    <td>{subscriber.username}</td>\r\n                    <td>{subscriber.phone_number}</td>\r\n                    <td>\r\n                      <button\r\n                        className=\"unsubscribe--button\"\r\n                        onClick={() => this.deleteSubscriber(subscriber)}\r\n                      >\r\n                        Delete\r\n                      </button>\r\n                    </td>\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        )}\r\n      </React.Fragment>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/profile.a1d40c38.png\";","module.exports = __webpack_public_path__ + \"static/media/ring2.a697fcc4.gif\";"],"sourceRoot":""}